import numpy as np
from lmfit.models import GaussianModel, ExponentialModel,SkewedGaussianModel
import sys
import matplotlib.pyplot as plt
def get_peaks_skewed_Gaussian(x,y, initial_guess):
    sgauss1  = SkewedGaussianModel(prefix='sg1_')
    pars = sgauss1.guess(y, x=x)
    pars.update( sgauss1.make_params())
    #pars['sg1_center'].set(600, min=300, max=1100)
    #pars['sg1_sigma'].set(300, min=10)
    #pars['sg1_amplitude'].set(2000, min=10)
    #pars['sg1_gamma'].set(-10)
    #sgauss2  = SkewedGaussianModel(prefix='sg2_')
    pars.update(sgauss2.make_params())
    #pars['sg2_center'].set(600, min=300, max=1100)
    #pars['sg2_sigma'].set(300, min=10)
    #pars['sg2_amplitude'].set(2000, min=10)
    #pars['sg2_gamma'].set(-10)
    sgauss3  = SkewedGaussianModel(prefix='sg3_')
    pars.update( sgauss3.make_params())
    #pars['sg3_center'].set(600, min=300, max=1100)
    #pars['sg3_sigma'].set(300, min=10)
    #pars['sg3_amplitude'].set(2000, min=10)
    #pars['sg3_gamma'].set(-1)
    sgauss4  = SkewedGaussianModel(prefix='sg4_')
    pars.update(sgauss4.make_params())
    #pars['sg4_center'].set(950, min=300, max=1100)
    #pars['sg4_sigma'].set(300, min=10)
    #pars['sg4_amplitude'].set(2000, min=10)
    #pars['sg4_gamma'].set(-1)
    smod = sgauss1 + sgauss2 + sgauss3 + sgauss4
    init = smod.eval(pars, x=x)
    plt.scatter(x, y,label='data' )
    #plt.plot(x, init, 'k--')
    sout = smod.fit(y, pars, x=x)
    scomps = sout.eval_components(x=x)
    print(sout.fit_report(min_correl=0.5))
    plt.plot(x, sout.best_fit, 'r')
    plt.plot(x, scomps['sg1_'], 'm--', label='1')
    plt.plot(x, scomps['sg2_'], 'k--', label='2')
    plt.plot(x, scomps['sg3_'], 'r--', label='3')
    plt.plot(x, scomps['sg4_'], 'g--', label='4')
    #plt.plot(Trange,0.8*dCrange, label='c1')
    #plt.plot(Trange,0.2*dCrange2, label='c2') 
    plt.legend()
    plt.show()
    return
    
def get_peaks_Gaussian(x,y, initial_guess):
  gauss1  = GaussianModel(prefix='g1_')
  pars = gauss1.guess(y, x=x)
  pars.update( gauss1.make_params())
  pars['g1_center'].set(600, min=300, max=1100)
  pars['g1_sigma'].set(300, min=10)
  pars['g1_amplitude'].set(2000, min=0)
  #pars['g1_gamma'].set(1)
  gauss2  = GaussianModel(prefix='g2_')
  pars.update(gauss2.make_params())
  pars['g2_center'].set(600, min=300, max=1100)
  pars['g2_sigma'].set(300, min=10)
  pars['g2_amplitude'].set(2000, min=0)
  #pars['g2_gamma'].set(1)
  gauss3  = GaussianModel(prefix='g3_')
  pars.update(gauss3.make_params())
  pars['g3_center'].set(600, min=300, max=1100)
  pars['g3_sigma'].set(300, min=10)
  pars['g3_amplitude'].set(2000, min=0)
  gauss4  = GaussianModel(prefix='g4_')
  pars.update(gauss4.make_params())
  pars['g4_center'].set(950, min=300, max=1100)
  pars['g4_sigma'].set(300, min=10)
  pars['g4_amplitude'].set(2000, min=0)
  mod = gauss1 + gauss2 + gauss3 + gauss4
  init = mod.eval(pars, x=x)
  plt.scatter(x, y,label='data')
  #plt.plot(x, init, 'k--')
  out = mod.fit(y, pars, x=x)
  comps = out.eval_components(x=x)
  print(out.fit_report(min_correl=0.5))
  plt.plot(x, out.best_fit, 'r-',label='total')
  plt.plot(x, comps['g1_'], 'm--', label='1')
  plt.plot(x, comps['g2_'], 'k--', label='2')
  plt.plot(x, comps['g3_'], 'r--', label='3')
  plt.plot(x, comps['g4_'], 'g--', label='4')
  #plt.plot(Trange,0.8*dCrange, label='c1')
  #plt.plot(Trange,0.2*dCrange2, label='c2') 
  plt.legend()
  plt.show()
  return
